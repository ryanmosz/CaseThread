import { promises as fs } from 'fs';
import * as path from 'path';
import { logger } from '../utils/logger';

export interface SaveResult {
  path: string;
  size: number;
  timestamp: Date;
}

/**
 * Saves the generated document to the specified path
 */
export async function saveDocument(
  content: string,
  outputPath: string
): Promise<SaveResult> {
  logger.debug(`Attempting to save document to: ${outputPath}`);
  
  try {
    // Ensure the directory exists
    const dir = path.dirname(outputPath);
    await fs.mkdir(dir, { recursive: true });
    logger.debug(`Ensured directory exists: ${dir}`);
    
    // Write the file
    await fs.writeFile(outputPath, content, 'utf-8');
    logger.debug(`File written successfully`);
    
    // Get file stats
    const stats = await fs.stat(outputPath);
    logger.debug(`File size: ${stats.size} bytes`);
    
    return {
      path: outputPath,
      size: stats.size,
      timestamp: new Date()
    };
  } catch (error: any) {
    logger.error(`Failed to save document: ${error.message}`);
    throw new Error(`Failed to save document: ${error.message}`);
  }
}

/**
 * Adds metadata header to the document
 */
export function addDocumentMetadata(
  content: string,
  documentType: string,
  inputFile: string,
  generationTime: number
): string {
  const metadata = [
    '<!--',
    `Generated by CaseThread CLI POC`,
    `Document Type: ${documentType}`,
    `Input File: ${inputFile}`,
    `Generated: ${new Date().toISOString()}`,
    `Generation Time: ${generationTime}s`,
    '-->',
    '',
    ''
  ].join('\n');
  
  return metadata + content;
} 