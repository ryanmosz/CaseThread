import { promises as fs } from 'fs';
import * as path from 'path';
import { logger } from '../utils/logger';

export interface SaveResult {
  path: string;
  size: number;
  timestamp: Date;
}

/**
 * Saves the generated document to the specified path
 */
export async function saveDocument(
  content: string,
  outputPath: string
): Promise<SaveResult> {
  logger.debug(`Attempting to save document to: ${outputPath}`);
  
  try {
    // Determine if we're in a test context
    const isTestContext = 
      process.env.NODE_ENV === 'test' ||
      process.env.TEST_MODE === 'true' ||
      (process.argv[1] && process.argv[1].includes('jest'));

    // Adjust path for test context
    let finalPath = outputPath;
    if (isTestContext && !outputPath.includes('test-results')) {
      // Extract just the filename
      const filename = path.basename(outputPath);
      const testSubDir = process.env.TEST_NAME || 'general-tests';
      finalPath = path.join('docs', 'testing', 'test-results', testSubDir, filename);
      logger.debug(`Test context detected, redirecting output to: ${finalPath}`);
    }
    
    // Ensure the directory exists
    const dir = path.dirname(finalPath);
    await fs.mkdir(dir, { recursive: true });
    logger.debug(`Ensured directory exists: ${dir}`);
    
    // Write the file
    await fs.writeFile(finalPath, content, 'utf-8');
    logger.debug(`File written successfully`);
    
    // Get file stats
    const stats = await fs.stat(finalPath);
    logger.debug(`File size: ${stats.size} bytes`);
    
    if (isTestContext) {
      logger.info(`Test document saved to: ${finalPath}`);
    }
    
    return {
      path: finalPath,
      size: stats.size,
      timestamp: new Date()
    };
  } catch (error: any) {
    logger.error(`Failed to save document: ${error.message}`);
    throw new Error(`Failed to save document: ${error.message}`);
  }
}

/**
 * Adds metadata header to the document
 */
export function addDocumentMetadata(
  content: string,
  documentType: string,
  inputFile: string,
  generationTime: number
): string {
  const metadata = [
    '<!--',
    `Generated by CaseThread CLI POC`,
    `Document Type: ${documentType}`,
    `Input File: ${inputFile}`,
    `Generated: ${new Date().toISOString()}`,
    `Generation Time: ${generationTime}s`,
    '-->',
    '',
    ''
  ].join('\n');
  
  return metadata + content;
} 