// Mock logger to avoid file system operations
jest.mock('../../src/utils/logger', () => ({
  logger: {
    error: jest.fn(),
    debug: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    level: 'info'
  }
}));

// Mock fs/promises module
jest.mock('fs', () => ({
  promises: {
    mkdir: jest.fn(),
    writeFile: jest.fn(),
    stat: jest.fn()
  }
}));

import { saveDocument, addDocumentMetadata } from '../../src/services/file-writer';

// Import after mocking
import { promises as fs } from 'fs';

describe('File Writer Service', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('saveDocument', () => {
    it('should save document successfully', async () => {
      const content = '# Test Document\n\nThis is a test.';
      const outputPath = '/output/test-doc.md';
      
      (fs.mkdir as jest.Mock).mockResolvedValue(undefined);
      (fs.writeFile as jest.Mock).mockResolvedValue(undefined);
      (fs.stat as jest.Mock).mockResolvedValue({ size: content.length });

      const result = await saveDocument(content, outputPath);

      // In test mode, the path should be redirected to test-results
      const expectedPath = 'docs/testing/test-results/general-tests/test-doc.md';
      
      expect(fs.mkdir).toHaveBeenCalledWith('docs/testing/test-results/general-tests', { recursive: true });
      expect(fs.writeFile).toHaveBeenCalledWith(expectedPath, content, 'utf-8');
      expect(result).toMatchObject({
        path: expectedPath,
        size: content.length
      });
    });

    it('should handle write errors', async () => {
      (fs.mkdir as jest.Mock).mockResolvedValue(undefined);
      (fs.writeFile as jest.Mock).mockRejectedValue(new Error('Permission denied'));

      await expect(saveDocument('content', '/readonly/file.md'))
        .rejects.toThrow('Failed to save document: Permission denied');
    });

    it('should handle directory creation errors', async () => {
      (fs.mkdir as jest.Mock).mockRejectedValue(new Error('Cannot create directory'));

      await expect(saveDocument('content', '/invalid/path/file.md'))
        .rejects.toThrow('Failed to save document: Cannot create directory');
    });
  });

  describe('addDocumentMetadata', () => {
    it('should add metadata header to document', () => {
      const content = '# Patent Assignment Agreement\n\nContent here...';
      const result = addDocumentMetadata(
        content,
        'patent-assignment',
        'input.yaml',
        45
      );

      expect(result).toContain('<!--');
      expect(result).toContain('Generated by CaseThread CLI POC');
      expect(result).toContain('Document Type: patent-assignment');
      expect(result).toContain('Input File: input.yaml');
      expect(result).toContain('Generation Time: 45s');
      expect(result).toContain('-->');
      expect(result).toContain(content);
    });

    it('should include ISO timestamp', () => {
      jest.useFakeTimers();
      jest.setSystemTime(new Date('2024-01-15T14:30:52Z'));

      const result = addDocumentMetadata('content', 'test', 'input.yaml', 30);
      
      expect(result).toContain('Generated: 2024-01-15T14:30:52.000Z');
      
      jest.useRealTimers();
    });
  });
}); 